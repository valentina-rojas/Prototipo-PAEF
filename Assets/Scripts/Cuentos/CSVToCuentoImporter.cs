using UnityEngine;
using UnityEditor;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;

public class CSVToCuentoImporter : EditorWindow
{
    private TextAsset csvFile;
    private string outputPath = "Assets/Scripts/Cuentos";

    [MenuItem("Tools/CSV to Cuento Importer")]
    public static void ShowWindow()
    {
        GetWindow<CSVToCuentoImporter>("CSV Importer");
    }

    private void OnGUI()
    {
        GUILayout.Label("Importar CSV a BaseDeCuentos", EditorStyles.boldLabel);

        csvFile = (TextAsset)EditorGUILayout.ObjectField("Archivo CSV", csvFile, typeof(TextAsset), false);

        if (GUILayout.Button("Importar CSV"))
        {
            if (csvFile != null)
                ImportCSV();
            else
                EditorUtility.DisplayDialog("Error", "Selecciona un archivo CSV", "OK");
        }
    }

    private void ImportCSV()
    {
        string cleanedText = Regex.Replace(csvFile.text, @"\r\n|\r", "\n"); 
        Queue<string> linesQueue = new Queue<string>(cleanedText.Split('\n'));

        if (linesQueue.Count < 2)
        {
            Debug.LogError("El archivo CSV no tiene suficientes líneas");
            return;
        }

        linesQueue.Dequeue();

        List<Cuento> cuentosList = new List<Cuento>();
        int lineNumber = 1;

        while (linesQueue.Count > 0)
        {
            string[] values = ParseCSVLineRobust(ref linesQueue);
            lineNumber++;

            if (values == null || values.Length < 6) continue;

            if (string.IsNullOrEmpty(values[0]) || string.IsNullOrEmpty(values[5]) || values[5].Length < 10)
            {
                Debug.LogWarning($" Línea {lineNumber} ignorada - Datos insuficientes.");
                continue;
            }

            Cuento cuento = new Cuento
            {
                genero = CleanField(values[0]),
                escenario = CleanField(values[1]),
                personaje = CleanField(values[2]),
                motivacion = CleanField(values[3]),
                extension = CleanField(values[4]),
                texto = CleanField(values[5])
            };

            cuentosList.Add(cuento);
        }

        if (cuentosList.Count > 0)
            CreateBaseDeCuentos(cuentosList.ToArray());
        else
            EditorUtility.DisplayDialog("Error", "No se encontraron cuentos válidos.", "OK");
    }

    private string CleanField(string field)
    {
        if (string.IsNullOrEmpty(field)) return "";
        string cleaned = field.Trim();
        if (cleaned.StartsWith("\"") && cleaned.EndsWith("\""))
            cleaned = cleaned.Substring(1, cleaned.Length - 2);
        cleaned = cleaned.Replace("\"\"", "\""); 
        return cleaned.Trim();
    }

    private string[] ParseCSVLineRobust(ref Queue<string> linesQueue)
    {
        if (linesQueue.Count == 0) return null;

        StringBuilder currentField = new StringBuilder();
        List<string> fields = new List<string>();
        bool inQuotes = false;

        while (linesQueue.Count > 0)
        {
            string line = linesQueue.Dequeue();
            int i = 0;

            while (i < line.Length)
            {
                char c = line[i];

                if (c == '"')
                {
                    if (inQuotes && i + 1 < line.Length && line[i + 1] == '"')
                    {
                        currentField.Append('"');
                        i++;
                    }
                    else
                    {
                        inQuotes = !inQuotes;
                    }
                }
                else if (c == '\t' && !inQuotes)
                {
                    fields.Add(currentField.ToString());
                    currentField.Clear();
                }
                else
                {
                    currentField.Append(c);
                }

                i++;
            }

            if (inQuotes) currentField.Append("\n");
            else break;
        }

        fields.Add(currentField.ToString());

        while (fields.Count < 6) fields.Add("");

        return fields.ToArray();
    }

    private void CreateBaseDeCuentos(Cuento[] cuentos)
    {
        if (!Directory.Exists(outputPath))
            Directory.CreateDirectory(outputPath);

        string assetPath = $"{outputPath}/BaseDeCuentos_AutoGenerated.asset";

        if (File.Exists(assetPath))
            AssetDatabase.DeleteAsset(assetPath);

        BaseDeCuentos baseDeCuentos = ScriptableObject.CreateInstance<BaseDeCuentos>();
        baseDeCuentos.cuentos = cuentos;

        AssetDatabase.CreateAsset(baseDeCuentos, assetPath);
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();

        EditorUtility.DisplayDialog("Éxito", $"Base de cuentos creada con {cuentos.Length} cuentos válidos\nUbicación: {assetPath}", "OK");
        Selection.activeObject = baseDeCuentos;

        Debug.Log($"Base de cuentos creada con {cuentos.Length} cuentos.");
    }
}
