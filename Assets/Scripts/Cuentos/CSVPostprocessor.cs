using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

public class CSVPostprocessor : AssetPostprocessor
{
    private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
    {
        foreach (string assetPath in importedAssets)
        {
            if (assetPath.EndsWith(".csv") && assetPath.ToLower().Contains("cuentos"))
            {
                ImportCSVAutomatically(assetPath);
            }
        }
    }

    private static void ImportCSVAutomatically(string csvPath)
    {
        TextAsset csvFile = AssetDatabase.LoadAssetAtPath<TextAsset>(csvPath);
        if (csvFile == null) return;

        string[] lines = csvFile.text.Split('\n');
        List<Cuento> cuentosList = new List<Cuento>();

        for (int i = 1; i < lines.Length; i++) 
        {
            if (string.IsNullOrEmpty(lines[i].Trim())) continue;

            string[] values = ParseCSVLine(lines[i]);
            if (values.Length < 6) continue;

            Cuento cuento = new Cuento
            {
                genero = values[0].Trim(),
                escenario = values[1].Trim(),
                personaje = values[2].Trim(),
                motivacion = values[3].Trim(),
                extension = values[4].Trim(),
                texto = values[5].Trim(),
                cuestionario = null
            };

            if (values.Length >= 9 && !string.IsNullOrEmpty(values[6]))
            {
                string preguntaTexto = values[6].Trim();
                string opcionesRaw = values[7].Trim();
                string respuestaRaw = values[8].Trim();

                string[] opciones = opcionesRaw.Split(';');
                int respuestaCorrecta = 0;
                int.TryParse(respuestaRaw.Replace("Opci√≥n", "").Trim(), out respuestaCorrecta);
                respuestaCorrecta = Mathf.Clamp(respuestaCorrecta - 1, 0, opciones.Length - 1);

                Pregunta pregunta = new Pregunta
                {
                    texto = preguntaTexto,
                    opciones = opciones,
                    respuestaCorrecta = respuestaCorrecta
                };

                cuento.cuestionario = new Pregunta[] { pregunta };
            }

            cuentosList.Add(cuento);
        }

        CreateBaseDeCuentosAsset(cuentosList.ToArray());
    }

    private static string[] ParseCSVLine(string line)
    {
        List<string> result = new List<string>();
        bool inQuotes = false;
        string currentField = "";

        for (int i = 0; i < line.Length; i++)
        {
            char c = line[i];

            if (c == '"')
            {
                inQuotes = !inQuotes;
            }
            else if ((c == '\t' || c == ',') && !inQuotes)
            {
                result.Add(currentField.Trim());
                currentField = "";
            }
            else
            {
                currentField += c;
            }
        }

        result.Add(currentField.Trim());
        return result.ToArray();
    }

    private static void CreateBaseDeCuentosAsset(Cuento[] cuentos)
    {
        string assetPath = "Assets/Scripts/Cuentos/BaseDeCuentos_AutoGenerated.asset";

        BaseDeCuentos baseDeCuentos = AssetDatabase.LoadAssetAtPath<BaseDeCuentos>(assetPath);

        if (baseDeCuentos == null)
        {
            baseDeCuentos = ScriptableObject.CreateInstance<BaseDeCuentos>();
            AssetDatabase.CreateAsset(baseDeCuentos, assetPath);
        }

        baseDeCuentos.cuentos = cuentos;

        EditorUtility.SetDirty(baseDeCuentos);
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
    }
}
