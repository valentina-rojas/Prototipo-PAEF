using UnityEngine;
using UnityEditor;
using System.IO;
using System.Collections.Generic;

public class CSVPostprocessor : AssetPostprocessor
{
    private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
    {
        foreach (string assetPath in importedAssets)
        {
            if (assetPath.EndsWith(".csv") && assetPath.Contains("cuentos"))
            {
                ImportCSVAutomatically(assetPath);
            }
        }
    }

    private static void ImportCSVAutomatically(string csvPath)
    {
        TextAsset csvFile = AssetDatabase.LoadAssetAtPath<TextAsset>(csvPath);
        if (csvFile == null) return;

        string[] lines = csvFile.text.Split('\n');
        List<Cuento> cuentosList = new List<Cuento>();

        for (int i = 1; i < lines.Length; i++)
        {
            if (string.IsNullOrEmpty(lines[i].Trim())) continue;
            
            string[] values = ParseCSVLine(lines[i]);
            
            if (values.Length >= 6)
            {
                Cuento cuento = new Cuento();
                cuento.genero = values[0];
                cuento.escenario = values[1];
                cuento.personaje = values[2];
                cuento.motivacion = values[3];
                cuento.extension = values[4];
                cuento.texto = values[5];
                
                cuentosList.Add(cuento);
            }
        }

        CreateBaseDeCuentosAsset(cuentosList.ToArray());
    }

    private static string[] ParseCSVLine(string line)
    {
        List<string> result = new List<string>();
        bool inQuotes = false;
        string currentField = "";
        
        for (int i = 0; i < line.Length; i++)
        {
            char c = line[i];
            
            if (c == '"')
            {
                inQuotes = !inQuotes;
            }
            else if (c == '\t' && !inQuotes)
            {
                result.Add(currentField.Trim());
                currentField = "";
            }
            else if (c == ',' && !inQuotes)
            {
                result.Add(currentField.Trim());
                currentField = "";
            }
            else
            {
                currentField += c;
            }
        }
        
        result.Add(currentField.Trim());
        return result.ToArray();
    }

    private static void CreateBaseDeCuentosAsset(Cuento[] cuentos)
    {
        string assetPath = "Assets/Scripts/Cuentos/BaseDeCuentos_AutoGenerated.asset";
        
        BaseDeCuentos baseDeCuentos = AssetDatabase.LoadAssetAtPath<BaseDeCuentos>(assetPath);
        
        if (baseDeCuentos == null)
        {
            baseDeCuentos = ScriptableObject.CreateInstance<BaseDeCuentos>();
            AssetDatabase.CreateAsset(baseDeCuentos, assetPath);
        }

        baseDeCuentos.cuentos = cuentos;

        EditorUtility.SetDirty(baseDeCuentos);
        AssetDatabase.SaveAssets();
        
        Debug.Log($"Base de cuentos actualizada autom√°ticamente con {cuentos.Length} cuentos en: {assetPath}");
    }
}